<style type="text/css">
textarea {
	width: 900px;
	height: 80px;
}

.button {
  display: inline-block;
  padding: 8px 16px;
  color: #fff;
  background-color: #007bff;
  border-radius: 5px;
  text-decoration: none;
  text-align: center;
}

.button:hover {
  background-color: #0056b3;
}
</style>

<div id="<%= dom_id twitter %>">
    <!-- PXV画像 
    <%
=begin %>
    ※HTMLのコメントにするだけだとERB実行されるっぽい※
    <% if twitter.pxvid.presence %>
        PXV:<br />
        <%= pic_path_tag(twitter.pxvid, 5, '10%', true) %>
        <br />
        TWT:<br />
    <% end %>
    <%
=end %>
    -->

    <% show_pic_num = 5 %>
    <% if params[:picn] == "" %>
    <% elsif params[:picn] == "all" %>
        <% show_pic_num = @twt_pic_path_list.size %>
    <% elsif params[:picn] =~ /(\d+)/ %>
        <% show_pic_num = $1.to_i %>
    <% else %>
    <% end %>

    <% if params[:pic_lf] =~ /(\d+)/ %>
        <% pic_lf = $1.to_i %>
    <% else %>
        <% pic_lf = 0 %>
    <% end %>

    <% if params[:corr] =~ /(\d+)/ %>
        <% corr = $1.to_i %>
    <% else %>
        <% corr = 0 %>
    <% end %>

    <% twt_pic_list = @twt_pic_path_list.map {|x| [Twt::twt_path_str(x), x, Twt::get_tweet_info_from_filepath(x)]}.sort.reverse %>
    <% twt_acnt = twitter %>

    <!-- ファイル名リスト -->
    <textarea id="pic_list" name="pic_list" rows="455" cols="400">
        <% twt_pic_list.first(show_pic_num).each.with_index(1) do |elem, idx| %>
<%= idx %>:<%= elem[0] %>
        <% end %>
    </textarea>
    <br />

    <% fsize_sum = 0 %>
    <!-- サムネイル -->
    <% if @twt_ids == nil %>
        <% twt_pic_list.first(show_pic_num).each.with_index(1) do |elem, idx| %>
            <%= idx %>
            <% path = elem[1] %>
            <% if elem[2][1] != 0 %>
                (<%= "複" %>)
                <% d_ratio = '5%' %>
            <% else %>
                <% d_ratio = '10%' %>
            <% end %>
            .

            <% phys_path = Util::get_public_path(elem[1]) %>
            <% filesize = FileTest.size(phys_path) %>
            <% fsize_sum += filesize %>

            <%= link_to_ex(image_tag(path, width: d_ratio, height: d_ratio, :alt => path), path) %>
            <% if corr != 0 and corr == idx %>
                <br />
            <% end %>
            <% if pic_lf != 0 and idx % pic_lf == 0 %>
                <br />
                <% i = idx - 3 %>
                <% 3.times do |x| %>
                    <%= i + 1 %>.
                    <%= twt_pic_list[i][0] %>
                    <% tweetid = twt_pic_list[i][2][0] %>
                    (<%= link_to_ex(tweetid, Twt::twt_tweet_url_dev(tweetid)) %>)
                    <br />
                    <% i += 1 %>
                <% end %>
            <% end %>
        <% end %>
    <% end %>
    
    <% if twt_pic_list.size > show_pic_num %>
        <%= link_to "...全て表示", twitter_path(picn: 'all', pic_lf: '3', corr: '0', refresh: "y") %>
    <% end %>
    <%= link_to "url txtチェック", twitter_path(file_check: 't', picn: 'all', pic_lf: '', corr: '0') %>
    全画像数：<%= twitter.filenum %>
    <%= link_to("重複チェック", twitter_path(dup_chk: 't', refresh: "y"), class: 'button') %>
    <% if twitter.filenum != twt_pic_list.size %>
        (読み込み:<%= twt_pic_list.size %>)
    <% end %>

    <% if twitter.filenum and twitter.filenum > twt_pic_list.size %>
        <h3>すべての画像が表示されていない可能性があります</h3>
    <% end %>
    <br />

    <% pl = twt_pic_list.map {|x| x[1]} %>
    <% freq_90d = Twt::calc_freq(pl, 90) %>
    <% freq_30d = Twt::calc_freq(pl, 30) %>
    <% freq_15d = Twt::calc_freq(pl, 15) %>
    <% ary = [freq_90d, freq_30d, freq_15d] %>
    <% avg = ary.sum / ary.size %>
    【更新頻度<%= Twt::CALC_FREQ_UNIT %>日あたり(90/30/14)】
    <% if twt_acnt != nil and twt_acnt.update_frequency != nil %>
        <% current_val_freq = twt_acnt.update_frequency %>
        設定値：<%= %!#{current_val_freq}! %>
        <% if (avg - current_val_freq).abs >= 100 %>
            [※現在の設定値との差が大きい]
        <% end %>
        →
    <% else %>
        ※値が設定されていません※
    <% end %>
    計算結果"<%= avg %>"
    (<%= freq_90d %>/<%= freq_30d %>/<%= freq_15d %>)
    ファイルサイズ平均：<%= (fsize_sum / show_pic_num) / 1024 %> KB
     合計：<%= (fsize_sum) / 1024 / 1024 %> MB
    (<%= show_pic_num %> files)
    <% if twt_pic_list[0] != nil %>
    <% end %>
    <br />

    <hr />

    <!-- tweet id -->
    <% twt_pic_list.first(1).each do |elem| %>
        <% tweet_id = elem[2][0] %>
        <b>
        <%#= tweet_id.to_s.reverse.gsub(/\d{3}/, '\0,').reverse %>
        <%= Twt::tweet_id_with_comma(tweet_id) %>
        </b>
        (公開日時：<%= Twt::date_info(tweet_id) %>)
        <% dt = Twt::get_time_from_path(twt_pic_list[0][1]) %>
        【以降の投稿数予測】<%= twitter.prediction(dt) %>
        <br />
        <% if @twitter.status == Twitter::STATUS_NOT_EXIST %>
            <%= link_to_ex tweet_id, Twt::twt_tweet_url_dev(tweet_id) %>
        <% end %>
    <% end %>

    <!-- URLのテキストファイルに含まれる画像が存在するかチェック -->
    <% if @twt_ids.presence %>
        <h2>チェック</h2>
        <% if @twt_ids.size == 0 %>
            対象なし
        <% end %>
        <% @twt_ids.each do |tweet_id| %>
            <% tweet = Tweet.find_by(tweet_id: tweet_id) %>
            <% hit = false %>
            <% @twt_pic_path_list.each do |path| %>
                <% if path.include? tweet_id.to_s %>
                    hit!(<%= Twt::timestamp_str(tweet_id) %>)|<%= tweet_id %> 
                    <% if params[:show_pic].presence %>
                        <%= link_to_ex image_tag(path, width: '10%', height: '10%', :alt => path), path %>
                    <% end %>
                    <% if tweet.presence %>
                    <% else %>
                        <!-- DBになければDBに登録 -->
                        <% Tweet::create_record(@twitter.twtid, tweet_id) %>
                        |DBレコード新規登録
                    <% end %>
                    <br />
                    <% hit = true %>
                    <% break %>
                <% end %>
            <% end %>
            <% if hit %>
            <% else %>
                <br />
                <%= %!#{Twt::timestamp_str tweet_id}(#{tweet_id}))! %> no hit...
                <%= link_to_ex(tweet_id, Twt::twt_tweet_url(@twitter.twtid, tweet_id)) %>
                <% if tweet.presence %>
                    <% if tweet.status == Tweet::StatusEnum::UNACCESSIBLE %>
                        <b><%= Tweet::StatusEnum::UNACCESSIBLE %></b>
                    <% elsif params[:tweet_id].to_i == tweet_id and params[:tweet_st] == Tweet::StatusEnum::DELETED %>
                        <% Tweet::update_record(tweet_id, Tweet::StatusEnum::DELETED) %>
                        '削除済み'として更新しました。
                    <% elsif tweet.status == Tweet::StatusEnum::DELETED %>
                        <b><%= Tweet::StatusEnum::DELETED %></b>
                    <% else %>
                        <% url = twitter_path(file_check: 't', picn: 'all', pic_lf: '', corr: '0', show_pic: 't', tweet_st: Tweet::StatusEnum::DELETED, tweet_id: tweet_id) %>
                        <%= link_to("'削除済み'として更新", url) %>
                    <% end %>
                <% else %>
                    <% if params[:tweet_id].to_i == tweet_id and params[:tweet_st] == Tweet::StatusEnum::UNACCESSIBLE %>
                        <!-- -->
                        <% Tweet::create_record(@twitter.twtid, tweet_id, Tweet::StatusEnum::UNACCESSIBLE) %>
                        'アクセス不可'として更新しました。
                    <% else %>
                        <% url = twitter_path(file_check: 't', picn: 'all', pic_lf: '', corr: '0', show_pic: 't', tweet_st: Tweet::StatusEnum::UNACCESSIBLE, tweet_id: tweet_id) %>
                        <%= link_to("'アクセス不可'として更新", url, class: 'button') %>
                    <% end %>
                <% end %>
                <br />
                <br />
            <% end %>
        <% end %>
    <% end %>

    <% if (params[:dup_chk].presence and params[:dup_chk] == "t") %>
        <h3>重複チェック結果</h3>
        <% pic_list = @twt_pic_path_list.map {|x| Util::get_public_path(x)} %>
        <% dup_path_list = Twt::db_update_dup_files(pic_list, @twitter.twtid, false) %>
        <% if dup_path_list.size > 0 %>
            <% base_path = UrlTxtReader::public_path %>
            <% d_ratio = '5%' %>
            <% dup_path_list.each do |path| %>
                <% ppath = Util::convert_path(base_path, path) %>
                <%= link_to_ex(image_tag(ppath, width: d_ratio, height: d_ratio, :alt => ppath), ppath) %>
            <% end %>
        <% else %>
            重複なし
        <% end %>
    <% end %>
</div>